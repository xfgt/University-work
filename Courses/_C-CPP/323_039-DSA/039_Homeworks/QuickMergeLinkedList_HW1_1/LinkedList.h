#pragma once
#include <iostream>
#include <cstdlib>

/**!
 * @details Node е структура описваща един елемент на единично свързан списък.
 */
struct Node {
    int data;       ///< Данните, които се съдържат в елемента.
    Node* next;     ///< Указателя, който сочи към следващия елемент в списъка.

    /**!
     * @brief Това е конструкторът на елемент.
     * @param val Стойността, с която се инициализира параметъра data в елемента.
     */
    Node(int val);
};

/**!
 * @details LinkedList е структурен клас на единично свързан списък с включени функции за сортиране чрез алгоритмите Merge sort и Quick sort.
 */
class LinkedList {
private:
    Node* head; ///< Указателя, който сочи към началния елемент в списъка.

    // Mergesort функции
	/**!
	 * @brief Функция сортираща единично свързан списък чрез алгоритъма Mergesort.
	 * @param head Корена на списъка. (началото)
	 * @return Указател от тип Node, тоест един елемент на списъка. (корена)
	 */
    Node* mergeSort(Node* head);
	
	
	/**!
	 * @brief Обединява два списъка. (Довършителната стъпка от алгоритъма Merge sort)
	 * @param a 1-ви списък
	 * @param b 2-ри списък
	 * @return Началото на обединения списък. Това е и крайната инструкция на mergeSort(Node*);
	 */
    Node* merge(Node* a, Node* b);
	
	
	/**!
	 * @brief Разделя списъка, спомагайки процедурата по сортиране.
	 * @param head Корена на списъка.
	 * @param frontRef Началото на 1-вия дял.
	 * @param backRef Началото на 2-рип дял.
	 */
    void frontBackSplit(Node* head, Node** frontRef, Node** backRef);



    // Quicksort функции
	/**!
	 * @brief Функцията обръщаща се към quickSortRecur, за реализиране на алгоритъма Quicksort.
	 * @param head Корена (началото) на списъка
	 * @return Указател от тип Node, тоест един елемент на списъка (корена).
	 */
    Node* quickSort(Node* head);
	
	
	/**!
	 * @brief Функция сортираща единично свързан списък чрез алгоритъма Quicksort.
	 * @param Корена, новото начало, новия край от указатели след сортиране.
	 * @return Указател от тип Node, тоест един елемент на списъка.
	 */
    Node* quickSortRecur(Node* head, Node** newHead, Node** newEnd);
	

public:
    /**!
     * @brief Създава обект без параметри. Заделя динамична памет.
     */
    LinkedList();

	/**!
	 * @brief Копиращ конструктор. Нуждаем се от него, защото ще сравняваме времето за сортиране на един и същ масив от случайни числа.
	 * Улеснява копирането на дефинирания тип, само чрез подаване на указателя сочещ началото му.
	 * @param other Обект от тип LinkedList взет по референция (без копиране) с ключовата дума const, подсигуряваща го от евентуални промени.
	 */
	void copyFrom(const LinkedList& other);

    /**!
     * @brief Разрушава обект от типа.
     */
    ~LinkedList();
	
	/**!
     * @brief Деалокира динамичната памет на целия списък.
	 * Функцията е тясно свързана с деструктора на класа.
     */
    void clear();

    /**!
     * @brief Функция за вкарване на елемент.
     * @param data Стойността, която елементът ще съдържа.
     */
    void push(int data);

    /**!
     * @brief Функция за принтиране на списъка.
	 * Имаме добавен const, за да запазим цялостта на данните в списъка.
     */
    void print() const;

    /**!
     * @brief Функция, която запълва списъка със случайни стойности.
     * В дефиницията на функцията се създават числа в интервала от lower до upper.
     * @param count Желаната бройка от елементи за запълване.
     * @param lower Долна граница на интервала от числа за запълване.
     * @param upper Горна граница на интервала от числа за запълване.
     */
    void fillRandom(int count, int lower, int upper);

    /**!
     * @brief Функция за сортиране на обект от тип единично свързан списък чрез алгоритъма Mergesort.
     */
    void sortWithMergeSort();

    /**!
     * @brief Функция за сортиране на обект от тип единично свързан списък чрез алгоритъма Quicksort.
     */
    void sortWithQuickSort();
};
