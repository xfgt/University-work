
// Ex. 1
#include <iostream>
#include <vector>
#include <algorithm>


const int _maxint_ = 100003;

int paretns[_maxint_], ds[_maxint_];


int find(int x) {
    if (paretns[x] != x)
        paretns[x] = find(paretns[x]);
    return paretns[x];
}


bool AUB(int x, int y) {
    x = find(x);
    y = find(y);
    if (x == y) return false;
    if (ds[x] < ds[y]) std::swap(x, y);
    paretns[y] = x;


    ds[x] += ds[y];
    return true;
}

int main() {
    
    int trials;
    std::cin >> trials;

    while (trials--) {
        int N, M, K;
        std::cin >> N >> M >> K;

        
        for (int i = 1; i <= N; i++) {
            paretns[i] = i;
            ds[i] = 1;
        }

        for (int i = 0; i < M; i++) {
            int u, v;
            std::cin >> u >> v;
            AUB(u, v);
        }

        std::vector<int> koreni;
        for (int i = 1; i <= N; i++) {
            if (find(i) == i)
                koreni.push_back(i);
        }

        int regions = koreni.size();
        int min_regions = std::max(1, regions - K);
        int max_regions = regions;

        std::cout << min_regions << " " << max_regions << "\n";
    }

    return 0;
}

// Ex.3 
#include <iostream>
#include <vector>
#include <algorithm>

struct Ulica {
    int u, v, t;
    bool navodnena = false;
};

int find(int u, std::vector<int>& paretn) {
    if (u != paretn[u])
        paretn[u] = find(paretn[u], paretn);
    return paretn[u];
}

bool AUB(int u, int v, std::vector<int>& parent, std::vector<int>& rank) {
    int ru = find(u, parent);
    int rv = find(v, parent);
    if (ru == rv) return false;
    if (rank[ru] < rank[rv]) {
        parent[ru] = rv;
    }
    else {
        parent[rv] = ru;
        if (rank[ru] == rank[rv]) rank[ru]++;
    }
    return true;
}


bool compareUlici(const Ulica& a, const Ulica& b) {
    return a.t < b.t;
}

int main() {

    int trials;
    std::cin >> trials;
    while (trials--) {
        int n, m, k;
        std::cin >> n >> m >> k;

        std::vector<Ulica> edges(m);
        for (int i = 0; i < m; ++i) {
            std::cin >> edges[i].u >> edges[i].v >> edges[i].t;
        }

        for (int i = 0; i < k; ++i) {
            int idx;
            std::cin >> idx;
            edges[idx].navodnena = true;
        }

        std::vector<Ulica> navodneni;
        for (auto& e : edges) {
            if (e.navodnena)
                navodneni.push_back(e);
        }

        std::sort(navodneni.begin(), navodneni.end(), compareUlici);

        std::vector<int> parent(n + 1);
        std::vector<int> rank(n + 1, 0);
        for (int i = 1; i <= n; ++i)
            parent[i] = i;

        int total = 0;
        int comps = n;
        for (auto& ul : navodneni) {
            if (AUB(ul.u, ul.v, parent, rank)) {
                total += ul.t;
                comps--;
                if (comps == 1) break;
            }
        }

        std::cout << (comps == 1 ? -1 : total) << '\n';
    }
    return 0;
}
