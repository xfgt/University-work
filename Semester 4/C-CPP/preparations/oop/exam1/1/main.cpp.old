

#include <iostream>
#include <cstring>
#include <cassert>

using namespace std;

class Stoka{

	friend ostream& operator << (ostream& out, const Stoka& obj);
	friend istream& operator >> (istream& in, Stoka& obj);

	private:
		char* name;
		char* id;
		double weight;
		int l, w, h;

	public:

		Stoka(char * name=nullptr, char * id=nullptr, double weight=0., int lenght=0, int width=0, int height=0){

		this->name = new char[strlen(name)+1];
		assert(this->name != nullptr);
		strcpy(this->name, name);
		
		this->id = new char[strlen(id)+1];
		assert(this->id != nullptr);
		strcpy(this->id, id);
		
		this->weight = weight;
		l = lenght;
		w = width;
		h = height;
	}

	~Stoka(){
		delete[] name;
		delete[] id;
	}


	char*	getName() 		{ return name;		}
	char*	getId()			{ return id; 		}
	double 	getWeight()		{ return weight; 	}
	int 	getLenght()		{ return l; 		}
	int 	getWidth()		{ return w; 		}
	int 	getHeight()		{ return h; 		}
	
	

	char* 	setName(char* name)					{

		if(name != nullptr) delete[] name;

		this->name = new char[strlen(name)+1];
		assert(this->name != nullptr);
		strcpy(this->name, name);
	}		

	char* 	setId(char* id)						{

		if(id != nullptr) delete[] id;

		this->id = new char[strlen(id)+1];
		assert(this->id != nullptr);
		strcpy(this->id, id);
	}		

	
	double 	setWeight(double weight)	{ this->weight = weight; }
	int 	setLenght(int lenght)	{ l = lenght; }
	int 	setWidth(int width)		{ w = width; }
	int 	setHeight(int height)	{ h = height; }




};


ostream& operator << (ostream& out, Stoka& obj){
	out	<<	obj.getName() 	<<	endl
		<<	obj.getId()		<< 	endl
		<< 	obj.getWeight()	<<	endl
<< '['  << obj.getLenght() << ", " << obj.getWidth() << ", " << obj.getHeight() << ']' << endl;

	return out;
}
	

istream& operator >> (istream& in, Stoka& obj){

	char* tname, *tid;

	in >> tname >> tid >> obj.weight >> obj.l >> obj.w >> obj.h;

	obj.setName(tname);
	obj.setId(tid);	

	return in;
}



int main(){

		
	Stoka s;
	cout << s;

	return 0;
}
